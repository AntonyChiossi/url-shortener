"""
Django settings for shortener project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path

SILENCED_SYSTEM_CHECKS = ["django_ratelimit.E003", "django_ratelimit.W001"]

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(fgf=ap#8wuwc9780xqulmqsm5$@@vff2p9rsj3f)w%-9i9xed"


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8082" "http://*.127.0.0.1",
    "https://*.127.0.0.1",
    "http://localhost:*",
    "http://localhost:4200",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8082",
    "http://localhost:4200",
]
ALLOWED_HOSTS = (
    [
        "localhost",
    ],
)
# CORS_ORIGIN_WHITELIST = [
#     "http://localhost:8082",
#     "http://localhost:4200",
# ]
CORS_ORIGIN_ALLOW_ALL = DEBUG

ALLOWED_HOSTS = []

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "login": "15/hour",
    },
}


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework_simplejwt",
    "django_ratelimit",
    "rest_framework",
    "urls",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_ratelimit.middleware.RatelimitMiddleware",
]

ROOT_URLCONF = "shortener.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shortener.wsgi.application"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://{}:6379".format(
            os.environ.get("CACHE_HOST") or "127.0.0.1",
        ),
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "urlshortener",
        "USER": "webapp",
        "PASSWORD": "password",
        "HOST": os.environ.get("DATABASE_HOST") or "127.0.0.1",
        "PORT": "5432",
    }
    # "default": {
    #     "ENGINE": "djongo",
    #     "NAME": "personal",
    #     "CLIENT": {
    #         "host": "localhost",
    #         "port": 27017,
    #     },
    #     "ENFORCE_SCHEMA": False,
    # }
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "dbtest1.sqlite3",
    # }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# I know, tokens should be short-lived. Change the values to shorted periods!
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=12),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3),
    # "ROTATE_REFRESH_TOKENS": True,
    # "BLACKLIST_AFTER_ROTATION": True,
    # "UPDATE_LAST_LOGIN": True,
    # "ALGORITHM": "HS256",
    # "SIGNING_KEY": SECRET_KEY,
    # "VERIFYING_KEY": None,
    # "AUDIENCE": None,
    # "ISSUER": None,
    # "AUTH_HEADER_TYPES": ("Bearer",),
    # "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    # "USER_ID_FIELD": "id",
    # "USER_ID_CLAIM": "user_id",
    # "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    # "TOKEN_TYPE_CLAIM": "token_type",
    # "JTI_CLAIM": "jti",
    # "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    # "SLIDING_TOKEN_LIFETIME": timedelta(hours=12),
    # "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=3),
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


BROKER_URL = "amqp://guest:guest@localhost:5672//"
CELERY_RESULT_BACKEND = "rpc://"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# if os.environ.get("CELERY_BROKER_URL"):
#     BROKER_URL = os.environ.get("CELERY_BROKER_URL")
# if os.environ.get("CELERY_RESULT_BACKEND"):
#     CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")
# if os.environ.get("CELERY_ACCEPT_CONTENT"):
#     CELERY_ACCEPT_CONTENT = os.environ.get("CELERY_ACCEPT_CONTENT")
# if os.environ.get("CELERY_TASK_SERIALIZER"):
#     CELERY_TASK_SERIALIZER = os.environ.get("CELERY_TASK_SERIALIZER")
# if os.environ.get("CELERY_RESULT_SERIALIZER"):
#     CELERY_RESULT_SERIALIZER = os.environ.get("CELERY_RESULT_SERIALIZER")
# if os.environ.get("CELERY_TIMEZONE"):
#     CELERY_TIMEZONE = os.environ.get("CELERY_TIMEZONE")
